{
  "Database": {
    "ConnectionString": "Host=ordersdb;Port=5432;Database=ordersdb;User ID=postgres;Password=postgres;Pooling=true;Include Error Detail=true;",
    "ConnectionStringRoot": "Host=ordersdb;Port=5432;Database=postgres;User ID=postgres;Password=postgres;Pooling=true;Include Error Detail=true;"
  },
  "Serilog": {
    "Using": [ "Serilog.Sinks.Graylog" ],
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "System": "Warning",
        "Microsoft": "Warning",
        "Microsoft.AspNetCore.Hosting.Diagnostics": "Warning"
      }
    },
    "WriteTo": [
      {
        "Name": "Graylog",
        "Args": {
          "hostnameOrAddress": "graylog",
          "port": "514",
          "transportType": "Udp"
        }
      },
      {
        "Name": "Console",
        "Args": {
          "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
          "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
        }
      }
    ]
  },
  "rabbitMq": {
    "connectionName": "orders-service",
    "retries": 3,
    "retryInterval": 2,
    "conventionsCasing": "snakeCase",
    "logger": {
      "enabled": true
    },
    "username": "guest",
    "password": "guest",
    "virtualHost": "/",
    "port": 5672,
    "hostnames": [
      "rabbitmq"
    ],
    "requestedConnectionTimeout": "00:00:30",
    "requestedHeartbeat": "00:01:00",
    "socketReadTimeout": "00:00:30",
    "socketWriteTimeout": "00:00:30",
    "continuationTimeout": "00:00:20",
    "handshakeContinuationTimeout": "00:00:10",
    "networkRecoveryInterval": "00:00:05",
    "exchange": {
      "declare": true,
      "durable": true,
      "autoDelete": false,
      "type": "topic",
      "name": "orders"
    },
    "queue": {
      "declare": true,
      "durable": true,
      "exclusive": false,
      "autoDelete": false,
      "template": "orders-service/{{exchange}}.{{message}}"
    },
    "context": {
      "enabled": true,
      "header": "message_context"
    },
    "deadLetter": {
      "enabled": true,
      "prefix": "dlx-",
      "declare": true
    },
    "maxProducerChannels": 1000,
    "requeueFailedMessages": false,
    "spanContextHeader": "span_context"
  }
}